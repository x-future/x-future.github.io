<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>X-future</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/x-future/x-future.github.io/"/>
  <updated>2016-12-09T15:56:09.978Z</updated>
  <id>https://github.com/x-future/x-future.github.io/</id>
  
  <author>
    <name>Xu xiaomin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python操作mysql</title>
    <link href="https://github.com/x-future/x-future.github.io/2016/12/09/Python%E6%93%8D%E4%BD%9Cmysql/"/>
    <id>https://github.com/x-future/x-future.github.io/2016/12/09/Python操作mysql/</id>
    <published>2016-12-09T13:39:20.000Z</published>
    <updated>2016-12-09T15:56:09.978Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python操作mysql数据库"><a href="#python操作mysql数据库" class="headerlink" title="python操作mysql数据库"></a>python操作mysql数据库</h1><p>Python 标准数据库接口为 Python DB-API，Python DB-API为开发人员提供了数据库应用编程接口。<br><a id="more"></a><br>Python 数据库接口支持非常多的数据库，你可以选择适合你项目的数据库：</p>
<p>GadFly</p>
<p>mSQL</p>
<p>MySQL</p>
<p>PostgreSQL</p>
<p>Microsoft SQL Server 2000</p>
<p>Informix</p>
<p>Interbase</p>
<p>Oracle</p>
<p>Sybase</p>
<p>你可以访问Python数据库接口及API查看详细的支持数据库列表。</p>
<p>不同的数据库你需要下载不同的DB API模块，例如你需要访问Oracle数据库和Mysql数据，你需要下载Oracle和MySQL数据库模块。</p>
<p>DB-API 是一个规范. 它定义了一系列必须的对象和数据库存取方式, 以便为各种各样的底层数据库系统和多种多样的数据库接口程序提供一致的访问接口 。</p>
<p>Python的DB-API，为大多数的数据库实现了接口，使用它连接各数据库后，就可以用相同的方式操作各数据库。</p>
<p>Python DB-API使用流程：</p>
<p>引入 API 模块。</p>
<p>获取与数据库的连接。</p>
<p>执行SQL语句和存储过程。</p>
<p>关闭数据库连接。</p>
<h2 id="什么是MySQLdb"><a href="#什么是MySQLdb" class="headerlink" title="什么是MySQLdb?"></a>什么是MySQLdb?</h2><p>MySQLdb 是用于Python链接Mysql数据库的接口，它实现了 Python 数据库 API 规范 V2.0，基于 MySQL C API 上建立的。</p>
<p>如何安装MySQLdb?<br>为了用DB-API编写MySQL脚本，必须确保已经安装了MySQL。复制以下代码，并执行：</p>
<blockquote>
<pre><code>import MySQLdb
</code></pre></blockquote>
<p>如果执行后的输出结果如下所示，意味着你没有安装 MySQLdb 模块：</p>
<blockquote>
<pre><code>Traceback (most recent call last):
  File &quot;test.py&quot;, line 3, in &lt;module&gt;
import MySQLdb
ImportError: No module named MySQLdb
</code></pre></blockquote>
<p>安装MySQLdb，请访问 <a href="http://sourceforge.net/projects/mysql-python" target="_blank" rel="external">http://sourceforge.net/projects/mysql-python</a> ，从这里可选择适合您的平台的安装包，分为预编译的二进制文件和源代码安装包。</p>
<p>如果您选择二进制文件发行版本的话，安装过程基本安装提示即可完成。如果从源代码进行安装的话，则需要切换到MySQLdb发行版本的顶级目录，并键入下列命令:</p>
<blockquote>
<pre><code>$ gunzip MySQL-python-1.2.2.tar.gz
$ tar -xvf MySQL-python-1.2.2.tar
$ cd MySQL-python-1.2.2
$ python setup.py build
$ python setup.py install
</code></pre></blockquote>
<p>注意：请确保您有root权限来安装上述模块。</p>
<h2 id="数据库连接"><a href="#数据库连接" class="headerlink" title="数据库连接"></a>数据库连接</h2><p>连接数据库前，请先确认以下事项：</p>
<p>您已经创建了数据库 TESTDB.</p>
<p>在TESTDB数据库中您已经创建了表 EMPLOYEE</p>
<p>EMPLOYEE表字段为 FIRST_NAME, LAST_NAME, AGE, SEX 和 INCOME。</p>
<p>连接数据库TESTDB使用的用户名为 “testuser” ，密码为 “test123”,你可以可以自己设定或者直接使用root用户名及其密码，Mysql数据库用户授权请使用Grant命令。</p>
<p>在你的机子上已经安装了 Python MySQLdb 模块。</p>
<p>如果您对sql语句不熟悉，可以访问我们的 SQL基础教程</p>
<p>实例：<br>以下实例链接Mysql的TESTDB数据库：</p>
<blockquote>
<pre><code>import MySQLdb

# 打开数据库连接
db = MySQLdb.connect(&quot;localhost&quot;,&quot;testuser&quot;,&quot;test123&quot;,&quot;TESTDB&quot; )

# 使用cursor()方法获取操作游标 
cursor = db.cursor()

# 使用execute方法执行SQL语句
cursor.execute(&quot;SELECT VERSION()&quot;)

# 使用 fetchone() 方法获取一条数据库。
data = cursor.fetchone()

print &quot;Database version : %s &quot; % data

# 关闭数据库连接
db.close()
</code></pre><p>执行以上脚本输出结果如下：</p>
<pre><code>Database version : 5.0.45
</code></pre></blockquote>
<h2 id="创建数据库表"><a href="#创建数据库表" class="headerlink" title="创建数据库表"></a>创建数据库表</h2><p>如果数据库连接存在我们可以使用execute()方法来为数据库创建表，如下所示创建表EMPLOYEE：</p>
<blockquote>
<pre><code>import MySQLdb

# 打开数据库连接
db = MySQLdb.connect(&quot;localhost&quot;,&quot;testuser&quot;,&quot;test123&quot;,&quot;TESTDB&quot; )

# 使用cursor()方法获取操作游标 
cursor = db.cursor()

# 如果数据表已经存在使用 execute() 方法删除表。
cursor.execute(&quot;DROP TABLE IF EXISTS EMPLOYEE&quot;)

# 创建数据表SQL语句
sql = &quot;&quot;&quot;CREATE TABLE EMPLOYEE (
 FIRST_NAME  CHAR(20) NOT NULL,
 LAST_NAME  CHAR(20),
 AGE INT,  
 SEX CHAR(1),
 INCOME FLOAT )&quot;&quot;&quot;

cursor.execute(sql)

# 关闭数据库连接
db.close()
</code></pre></blockquote>
<h2 id="数据库插入操作"><a href="#数据库插入操作" class="headerlink" title="数据库插入操作"></a>数据库插入操作</h2><p>以下实例使用执行 SQL INSERT 语句向表 EMPLOYEE 插入记录：</p>
<blockquote>
<pre><code>#!/usr/bin/python

import MySQLdb

# 打开数据库连接
db = MySQLdb.connect(&quot;localhost&quot;,&quot;testuser&quot;,&quot;test123&quot;,&quot;TESTDB&quot; )

# 使用cursor()方法获取操作游标 
cursor = db.cursor()

# SQL 插入语句
sql = &quot;&quot;&quot;INSERT INTO EMPLOYEE(FIRST_NAME,
 LAST_NAME, AGE, SEX, INCOME)
 VALUES (&apos;Mac&apos;, &apos;Mohan&apos;, 20, &apos;M&apos;, 2000)&quot;&quot;&quot;
try:
   # 执行sql语句
   cursor.execute(sql)
   # 提交到数据库执行
   db.commit()
except:
   # Rollback in case there is any error
   db.rollback()

# 关闭数据库连接
db.close()
</code></pre></blockquote>
<p>以上例子也可以写成如下形式：</p>
<blockquote>
<pre><code> import MySQLdb

# 打开数据库连接
db = MySQLdb.connect(&quot;localhost&quot;,&quot;testuser&quot;,&quot;test123&quot;,&quot;TESTDB&quot; )

# 使用cursor()方法获取操作游标 
cursor = db.cursor()

# SQL 插入语句
sql = &quot;INSERT INTO EMPLOYEE(FIRST_NAME, \
   LAST_NAME, AGE, SEX, INCOME) \
   VALUES (&apos;%s&apos;, &apos;%s&apos;, &apos;%d&apos;, &apos;%c&apos;, &apos;%d&apos; )&quot; % \
   (&apos;Mac&apos;, &apos;Mohan&apos;, 20, &apos;M&apos;, 2000)
try:
   # 执行sql语句
   cursor.execute(sql)
   # 提交到数据库执行
   db.commit()
except:
   # 发生错误时回滚
   db.rollback()

# 关闭数据库连接
db.close()
</code></pre></blockquote>
<p>实例：<br>以下代码使用变量向SQL语句中传递参数:</p>
<blockquote>
<pre><code>..................................
user_id = &quot;test123&quot;
password = &quot;password&quot;

con.execute(&apos;insert into Login values(&quot;%s&quot;, &quot;%s&quot;)&apos; % \
 (user_id, password))
..................................
</code></pre></blockquote>
<h2 id="数据库查询操作"><a href="#数据库查询操作" class="headerlink" title="数据库查询操作"></a>数据库查询操作</h2><p>Python查询Mysql使用 fetchone() 方法获取单条数据, 使用fetchall() 方法获取多条数据。</p>
<p>fetchone(): 该方法获取下一个查询结果集。结果集是一个对象</p>
<p>fetchall():接收全部的返回结果行.</p>
<p>rowcount: 这是一个只读属性，并返回执行execute()方法后影响的行数。</p>
<p>实例：<br>查询EMPLOYEE表中salary（工资）字段大于1000的所有数据：</p>
<blockquote>
<pre><code>import MySQLdb

# 打开数据库连接
db = MySQLdb.connect(&quot;localhost&quot;,&quot;testuser&quot;,&quot;test123&quot;,&quot;TESTDB&quot; )

# 使用cursor()方法获取操作游标 
cursor = db.cursor()

# SQL 查询语句
sql = &quot;SELECT * FROM EMPLOYEE \
   WHERE INCOME &apos;%d&apos;&quot; % (1000)
try:
   # 执行SQL语句
   cursor.execute(sql)
   # 获取所有记录列表
   results = cursor.fetchall()
   for row in results:
  fname = row[0]
  lname = row[1]
  age = row[2]
  sex = row[3]
  income = row[4]
  # 打印结果
  print &quot;fname=%s,lname=%s,age=%d,sex=%s,income=%d&quot; % \
 (fname, lname, age, sex, income )
except:
   print &quot;Error: unable to fecth data&quot;

# 关闭数据库连接
db.close()
</code></pre></blockquote>
<p>以上脚本执行结果如下：</p>
<blockquote>
<pre><code>fname=Mac, lname=Mohan, age=20, sex=M, income=2000
</code></pre></blockquote>
<h2 id="数据库更新操作"><a href="#数据库更新操作" class="headerlink" title="数据库更新操作"></a>数据库更新操作</h2><p>更新操作用于更新数据表的的数据，以下实例将 TESTDB表中的 SEX 字段全部修改为 ‘M’，AGE 字段递增1：</p>
<blockquote>
<pre><code>import MySQLdb

# 打开数据库连接
db = MySQLdb.connect(&quot;localhost&quot;,&quot;testuser&quot;,&quot;test123&quot;,&quot;TESTDB&quot; )

# 使用cursor()方法获取操作游标 
cursor = db.cursor()

# SQL 更新语句
sql = &quot;UPDATE EMPLOYEE SET AGE = AGE + 1
  WHERE SEX = &apos;%c&apos;&quot; % (&apos;M&apos;)
try:
   # 执行SQL语句
   cursor.execute(sql)
   # 提交到数据库执行
   db.commit()
except:
   # 发生错误时回滚
   db.rollback()

# 关闭数据库连接
db.close()
</code></pre></blockquote>
<h2 id="执行事务"><a href="#执行事务" class="headerlink" title="执行事务"></a>执行事务</h2><p>事务机制可以确保数据一致性。</p>
<p>事务应该具有4个属性：原子性、一致性、隔离性、持久性。这四个属性通常称为ACID特性。</p>
<p>原子性（atomicity）。一个事务是一个不可分割的工作单位，事务中包括的诸操作要么都做，要么都不做。</p>
<p>一致性（consistency）。事务必须是使数据库从一个一致性状态变到另一个一致性状态。一致性与原子性是密切相关的。</p>
<p>隔离性（isolation）。一个事务的执行不能被其他事务干扰。即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</p>
<p>持久性（durability）。持续性也称永久性（permanence），指一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。接下来的其他操作或故障不应该对其有任何影响。</p>
<p>Python DB API 2.0 的事务提供了两个方法 commit 或 rollback。<br>实例：</p>
<blockquote>
<pre><code># SQL删除记录语句
sql = &quot;DELETE FROM EMPLOYEE WHERE AGE &apos;%d&apos;&quot; % (20)
try:
   # 执行SQL语句
   cursor.execute(sql)
   # 向数据库提交
   db.commit()
except:
   # 发生错误时回滚
   db.rollback()
</code></pre></blockquote>
<p>对于支持事务的数据库， 在Python数据库编程中，当游标建立之时，就自动开始了一个隐形的数据库事务。</p>
<p>commit()方法游标的所有更新操作，rollback（）方法回滚当前游标的所有操作。每一个方法都开始了一个新的事务。<br>错误处理<br>DB API中定义了一些数据库操作的错误及异常，下表列出了这些错误和异常:<br>异常    描述</p>
<blockquote>
<p>Warning    当有严重警告时触发，例如插入数据是被截断等等。必须是 StandardError 的子类。<br>Error    警告以外所有其他错误类。必须是 StandardError 的子类。<br>InterfaceError    当有数据库接口模块本身的错误（而不是数据库的错误）发生时触发。 必须是Error的子类。<br>DatabaseError    和数据库有关的错误发生时触发。 必须是Error的子类。<br>DataError    当有数据处理时的错误发生时触发，例如：除零错误，数据超范围等等。 必须是DatabaseError的子类。<br>OperationalError    指非用户控制的，而是操作数据库时发生的错误。例如：连接意外断开、 数据库名未找到、事务处理失败、内存分配错误等等操作数据库是发生的错误。 必须是DatabaseError的子类。<br>IntegrityError    完整性相关的错误，例如外键检查失败等。必须是DatabaseError子类。<br>InternalError    数据库的内部错误，例如游标（cursor）失效了、事务同步失败等等。 必须是DatabaseError子类。<br>ProgrammingError    程序错误，例如数据表（table）没找到或已存在、SQL语句语法错误、 参数数量错误等等。必须是DatabaseError的子类。<br>NotSupportedError    不支持错误，指使用了数据库不支持的函数或API等。例如在连接对象上 使用.rollback()函数，然而数据库并不支持事务或者事务已关闭。 必须是DatabaseError的子类。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python操作mysql数据库&quot;&gt;&lt;a href=&quot;#python操作mysql数据库&quot; class=&quot;headerlink&quot; title=&quot;python操作mysql数据库&quot;&gt;&lt;/a&gt;python操作mysql数据库&lt;/h1&gt;&lt;p&gt;Python 标准数据库接口为 Python DB-API，Python DB-API为开发人员提供了数据库应用编程接口。&lt;br&gt;
    
    </summary>
    
      <category term="python基础" scheme="https://github.com/x-future/x-future.github.io/categories/python%E5%9F%BA%E7%A1%80/"/>
    
      <category term="Python操作mysql" scheme="https://github.com/x-future/x-future.github.io/categories/python%E5%9F%BA%E7%A1%80/Python%E6%93%8D%E4%BD%9Cmysql/"/>
    
    
      <category term="Python" scheme="https://github.com/x-future/x-future.github.io/tags/Python/"/>
    
      <category term="Python操作mysql" scheme="https://github.com/x-future/x-future.github.io/tags/Python%E6%93%8D%E4%BD%9Cmysql/"/>
    
  </entry>
  
  <entry>
    <title>Python序列化</title>
    <link href="https://github.com/x-future/x-future.github.io/2016/12/04/Python%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>https://github.com/x-future/x-future.github.io/2016/12/04/Python序列化/</id>
    <published>2016-12-04T13:39:20.000Z</published>
    <updated>2016-12-04T14:01:03.270Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h1><p>在程序运行的过程中，所有的变量都是在内存中，比如，定义一个dict：</p>
<pre><code>d = dict(name=&apos;Bob&apos;, age=20, score=88)
</code></pre><a id="more"></a>
<p>可以随时修改变量，比如把name改成’Bill’，但是一旦程序结束，变量所占用的内存就被操作系统全部回收。如果没有把修改后的’Bill’存储到磁盘上，下次重新运行程序，变量又被初始化为’Bob’。</p>
<p>我们把变量从内存中变成可存储或传输的过程称之为序列化，在Python中叫pickling，在其他语言中也被称之为serialization，marshalling，flattening等等，都是一个意思。</p>
<p>序列化之后，就可以把序列化后的内容写入磁盘，或者通过网络传输到别的机器上。</p>
<p>反过来，把变量内容从序列化的对象重新读到内存里称之为反序列化，即unpickling。</p>
<h2 id="PICKLE"><a href="#PICKLE" class="headerlink" title="PICKLE"></a>PICKLE</h2><p>Python提供两个模块来实现序列化：cPickle和pickle。这两个模块功能是一样的，区别在于cPickle是C语言写的，速度快，pickle是纯Python写的，速度慢，跟cStringIO和StringIO一个道理。用的时候，先尝试导入cPickle，如果失败，再导入pickle：</p>
<pre><code>try:
    import cPickle as pickle
except ImportError:
    import pickle
首先，我们尝试把一个对象序列化并写入文件：

&gt;&gt;&gt; d = dict(name=&apos;Bob&apos;, age=20, score=88)
&gt;&gt;&gt; pickle.dumps(d)
&quot;(dp0\nS&apos;age&apos;\np1\nI20\nsS&apos;score&apos;\np2\nI88\nsS&apos;name&apos;\np3\nS&apos;Bob&apos;\np4\ns.&quot;
pickle.dumps()方法把任意对象序列化成一个str，然后，就可以把这个str写入文件。或者用另一个方法pickle.dump()直接把对象序列化后写入一个file-like Object：

&gt;&gt;&gt; f = open(&apos;dump.txt&apos;, &apos;wb&apos;)
&gt;&gt;&gt; pickle.dump(d, f)
&gt;&gt;&gt; f.close()
</code></pre><p>看看写入的dump.txt文件，一堆乱七八糟的内容，这些都是Python保存的对象内部信息。</p>
<p>当我们要把对象从磁盘读到内存时，可以先把内容读到一个str，然后用pickle.loads()方法反序列化出对象，也可以直接用pickle.load()方法从一个file-like Object中直接反序列化出对象。我们打开另一个Python命令行来反序列化刚才保存的对象：</p>
<pre><code>&gt;&gt;&gt; f = open(&apos;dump.txt&apos;, &apos;rb&apos;)
&gt;&gt;&gt; d = pickle.load(f)
&gt;&gt;&gt; f.close()
&gt;&gt;&gt; d
{&apos;age&apos;: 20, &apos;score&apos;: 88, &apos;name&apos;: &apos;Bob&apos;}
</code></pre><p>变量的内容又回来了！</p>
<p>当然，这个变量和原来的变量是完全不相干的对象，它们只是内容相同而已。</p>
<p>Pickle的问题和所有其他编程语言特有的序列化问题一样，就是它只能用于Python，并且可能不同版本的Python彼此都不兼容，因此，只能用Pickle保存那些不重要的数据，不能成功地反序列化也没关系。</p>
<h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p>如果我们要在不同的编程语言之间传递对象，就必须把对象序列化为标准格式，比如XML，但更好的方法是序列化为JSON，因为JSON表示出来就是一个字符串，可以被所有语言读取，也可以方便地存储到磁盘或者通过网络传输。JSON不仅是标准格式，并且比XML更快，而且可以直接在Web页面中读取，非常方便。</p>
<p>JSON表示的对象就是标准的JavaScript语言的对象，JSON和Python内置的数据类型对应如下：</p>
<pre><code>JSON类型    Python类型
{}    dict
[]    list
&quot;string&quot;    &apos;str&apos;或u&apos;unicode&apos;
1234.56    int或float
true/false    True/False
null    None
</code></pre><p>Python内置的json模块提供了非常完善的Python对象到JSON格式的转换。我们先看看如何把Python对象变成一个JSON：</p>
<pre><code>&gt;&gt;&gt; import json
&gt;&gt;&gt; d = dict(name=&apos;Bob&apos;, age=20, score=88)
&gt;&gt;&gt; json.dumps(d)
&apos;{&quot;age&quot;: 20, &quot;score&quot;: 88, &quot;name&quot;: &quot;Bob&quot;}&apos;
</code></pre><p>dumps()方法返回一个str，内容就是标准的JSON。类似的，dump()方法可以直接把JSON写入一个file-like Object。</p>
<p>要把JSON反序列化为Python对象，用loads()或者对应的load()方法，前者把JSON的字符串反序列化，后者从file-like Object中读取字符串并反序列化：</p>
<pre><code>&gt;&gt;&gt; json_str = &apos;{&quot;age&quot;: 20, &quot;score&quot;: 88, &quot;name&quot;: &quot;Bob&quot;}&apos;
&gt;&gt;&gt; json.loads(json_str)
{u&apos;age&apos;: 20, u&apos;score&apos;: 88, u&apos;name&apos;: u&apos;Bob&apos;}
</code></pre><p>有一点需要注意，就是反序列化得到的所有字符串对象默认都是unicode而不是str。由于JSON标准规定JSON编码是UTF-8，所以我们总是能正确地在Python的str或unicode与JSON的字符串之间转换。</p>
<h2 id="JSON进阶"><a href="#JSON进阶" class="headerlink" title="JSON进阶"></a>JSON进阶</h2><p>Python的dict对象可以直接序列化为JSON的{}，不过，很多时候，我们更喜欢用class表示对象，比如定义Student类，然后序列化：</p>
<pre><code>import json

class Student(object):
    def __init__(self, name, age, score):
    self.name = name
    self.age = age
    self.score = score

s = Student(&apos;Bob&apos;, 20, 88)
print(json.dumps(s))
运行代码，毫不留情地得到一个TypeError：

Traceback (most recent call last):
  ...
TypeError: &lt;__main__.Student object at 0x10aabef50&gt; is not JSON serializable
</code></pre><p>错误的原因是Student对象不是一个可序列化为JSON的对象。</p>
<p>如果连class的实例对象都无法序列化为JSON，这肯定不合理！</p>
<p>别急，我们仔细看看dumps()方法的参数列表，可以发现，除了第一个必须的obj参数外，dumps()方法还提供了一大堆的可选参数：</p>
<p><a href="https://docs.python.org/2/library/json.html#json.dumps" target="_blank" rel="external">https://docs.python.org/2/library/json.html#json.dumps</a></p>
<p>这些可选参数就是让我们来定制JSON序列化。前面的代码之所以无法把Student类实例序列化为JSON，是因为默认情况下，dumps()方法不知道如何将Student实例变为一个JSON的{}对象。</p>
<p>可选参数default就是把任意一个对象变成一个可序列为JSON的对象，我们只需要为Student专门写一个转换函数，再把函数传进去即可：</p>
<pre><code>def student2dict(std):
    return {
    &apos;name&apos;: std.name,
    &apos;age&apos;: std.age,
    &apos;score&apos;: std.score
    }

print(json.dumps(s, default=student2dict))
</code></pre><p>这样，Student实例首先被student2dict()函数转换成dict，然后再被顺利序列化为JSON。</p>
<p>不过，下次如果遇到一个Teacher类的实例，照样无法序列化为JSON。我们可以偷个懒，把任意class的实例变为dict：</p>
<pre><code>print(json.dumps(s, default=lambda obj: obj.__dict__))
</code></pre><p>因为通常class的实例都有一个<strong>dict</strong>属性，它就是一个dict，用来存储实例变量。也有少数例外，比如定义了<strong>slots</strong>的class。</p>
<p>同样的道理，如果我们要把JSON反序列化为一个Student对象实例，loads()方法首先转换出一个dict对象，然后，我们传入的object_hook函数负责把dict转换为Student实例：</p>
<pre><code>def dict2student(d):
    return Student(d[&apos;name&apos;], d[&apos;age&apos;], d[&apos;score&apos;])

json_str = &apos;{&quot;age&quot;: 20, &quot;score&quot;: 88, &quot;name&quot;: &quot;Bob&quot;}&apos;
print(json.loads(json_str, object_hook=dict2student))
运行结果如下：

&lt;__main__.Student object at 0x10cd3c190&gt;
</code></pre><p>打印出的是反序列化的Student实例对象。</p>
<p>小结</p>
<p>Python语言特定的序列化模块是pickle，但如果要把序列化搞得更通用、更符合Web标准，就可以使用json模块。</p>
<p>json模块的dumps()和loads()函数是定义得非常好的接口的典范。当我们使用时，只需要传入一个必须的参数。但是，当默认的序列化或反序列机制不满足我们的要求时，我们又可以传入更多的参数来定制序列化或反序列化的规则，既做到了接口简单易用，又做到了充分的扩展性和灵活性。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;序列化&quot;&gt;&lt;a href=&quot;#序列化&quot; class=&quot;headerlink&quot; title=&quot;序列化&quot;&gt;&lt;/a&gt;序列化&lt;/h1&gt;&lt;p&gt;在程序运行的过程中，所有的变量都是在内存中，比如，定义一个dict：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;d = dict(name=&amp;apos;Bob&amp;apos;, age=20, score=88)
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="python基础" scheme="https://github.com/x-future/x-future.github.io/categories/python%E5%9F%BA%E7%A1%80/"/>
    
      <category term="Python序列化" scheme="https://github.com/x-future/x-future.github.io/categories/python%E5%9F%BA%E7%A1%80/Python%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    
      <category term="Python" scheme="https://github.com/x-future/x-future.github.io/tags/Python/"/>
    
      <category term="Python序列化" scheme="https://github.com/x-future/x-future.github.io/tags/Python%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Git远程操作详解</title>
    <link href="https://github.com/x-future/x-future.github.io/2016/12/04/Git%20command/"/>
    <id>https://github.com/x-future/x-future.github.io/2016/12/04/Git command/</id>
    <published>2016-12-03T18:39:20.000Z</published>
    <updated>2016-12-04T10:49:59.563Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git远程操作详解"><a href="#Git远程操作详解" class="headerlink" title="Git远程操作详解"></a>Git远程操作详解</h1><p>Git是目前最流行的版本管理系统，学会Git几乎成了开发者的必备技能。<br><a id="more"></a><br>Git有很多优势，其中之一就是远程操作非常简便。本文详细介绍5个Git命令，它们的概念和用法，理解了这些内容，你就会完全掌握Git远程操作。</p>
<pre><code>git clone
git remote
git fetch
git pull
git push
</code></pre><p>本文针对初级用户，从最简单的讲起，但是需要读者对Git的基本用法有所了解。同时，本文覆盖了上面5个命令的几乎所有的常用用法，所以对于熟练用户也有参考价值。<br>git</p>
<h2 id="一、git-clone"><a href="#一、git-clone" class="headerlink" title="一、git clone"></a>一、git clone</h2><p>远程操作的第一步，通常是从远程主机克隆一个版本库，这时就要用到git clone命令。</p>
<pre><code>$ git clone &lt;版本库的网址&gt;
比如，克隆jQuery的版本库。

$ git clone https://github.com/jquery/jquery.git
</code></pre><p>该命令会在本地主机生成一个目录，与远程主机的版本库同名。如果要指定不同的目录名，可以将目录名作为git clone命令的第二个参数。</p>
<pre><code>$ git clone &lt;版本库的网址&gt; &lt;本地目录名&gt;
</code></pre><p>git clone支持多种协议，除了HTTP(s)以外，还支持SSH、Git、本地文件协议等，下面是一些例子。</p>
<pre><code>$ git clone http[s]://example.com/path/to/repo.git/
$ git clone ssh://example.com/path/to/repo.git/
$ git clone git://example.com/path/to/repo.git/
$ git clone /opt/git/project.git 
$ git clone file:///opt/git/project.git
$ git clone ftp[s]://example.com/path/to/repo.git/
$ git clone rsync://example.com/path/to/repo.git/
SSH协议还有另一种写法。

$ git clone [user@]example.com:path/to/repo.git/
</code></pre><p>通常来说，Git协议下载速度最快，SSH协议用于需要用户认证的场合。各种协议优劣的详细讨论请参考官方文档。</p>
<h2 id="二、git-remote"><a href="#二、git-remote" class="headerlink" title="二、git remote"></a>二、git remote</h2><p>为了便于管理，Git要求每个远程主机都必须指定一个主机名。git remote命令就用于管理主机名。<br>不带选项的时候，git remote命令列出所有远程主机。</p>
<pre><code>$ git remote
origin
使用-v选项，可以参看远程主机的网址。

$ git remote -v
origin  git@github.com:jquery/jquery.git (fetch)
origin  git@github.com:jquery/jquery.git (push)
上面命令表示，当前只有一台远程主机，叫做origin，以及它的网址。
克隆版本库的时候，所使用的远程主机自动被Git命名为origin。如果想用其他的主机名，需要用git clone命令的-o选项指定。

$ git clone -o jQuery https://github.com/jquery/jquery.git
$ git remote
jQuery
上面命令表示，克隆的时候，指定远程主机叫做jQuery。
git remote show命令加上主机名，可以查看该主机的详细信息。

$ git remote show &lt;主机名&gt;
git remote add命令用于添加远程主机。

$ git remote add &lt;主机名&gt; &lt;网址&gt;
git remote rm命令用于删除远程主机。

$ git remote rm &lt;主机名&gt;
git remote rename命令用于远程主机的改名。

$ git remote rename &lt;原主机名&gt; &lt;新主机名&gt;
</code></pre><h2 id="三、git-fetch"><a href="#三、git-fetch" class="headerlink" title="三、git fetch"></a>三、git fetch</h2><p>一旦远程主机的版本库有了更新（Git术语叫做commit），需要将这些更新取回本地，这时就要用到git fetch命令。</p>
<pre><code>$ git fetch &lt;远程主机名&gt;
上面命令将某个远程主机的更新，全部取回本地。
git fetch命令通常用来查看其他人的进程，因为它取回的代码对你本地的开发代码没有影响。
默认情况下，git fetch取回所有分支（branch）的更新。如果只想取回特定分支的更新，可以指定分支名。

$ git fetch &lt;远程主机名&gt; &lt;分支名&gt;
比如，取回origin主机的master分支。

$ git fetch origin master
所取回的更新，在本地主机上要用&quot;远程主机名/分支名&quot;的形式读取。比如origin主机的master，就要用origin/master读取。
git branch命令的-r选项，可以用来查看远程分支，-a选项查看所有分支。

$ git branch -r
origin/master

$ git branch -a
* master
  remotes/origin/master
上面命令表示，本地主机的当前分支是master，远程分支是origin/master。
取回远程主机的更新以后，可以在它的基础上，使用git checkout命令创建一个新的分支。

$ git checkout -b newBrach origin/master
上面命令表示，在origin/master的基础上，创建一个新分支。
此外，也可以使用git merge命令或者git rebase命令，在本地分支上合并远程分支。

$ git merge origin/master
# 或者
$ git rebase origin/master
上面命令表示在当前分支上，合并origin/master。
</code></pre><h2 id="四、git-pull"><a href="#四、git-pull" class="headerlink" title="四、git pull"></a>四、git pull</h2><p>git pull命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并。它的完整格式稍稍有点复杂。</p>
<pre><code>$ git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;
比如，取回origin主机的next分支，与本地的master分支合并，需要写成下面这样。

$ git pull origin next:master
如果远程分支是与当前分支合并，则冒号后面的部分可以省略。

$ git pull origin next
上面命令表示，取回origin/next分支，再与当前分支合并。实质上，这等同于先做git fetch，再做git merge。

$ git fetch origin
$ git merge origin/next
在某些场合，Git会自动在本地分支与远程分支之间，建立一种追踪关系（tracking）。比如，在git clone的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的master分支自动&quot;追踪&quot;origin/master分支。
Git也允许手动建立追踪关系。

git branch --set-upstream master origin/next
上面命令指定master分支追踪origin/next分支。
如果当前分支与远程分支存在追踪关系，git pull就可以省略远程分支名。

$ git pull origin
上面命令表示，本地的当前分支自动与对应的origin主机&quot;追踪分支&quot;（remote-tracking branch）进行合并。
如果当前分支只有一个追踪分支，连远程主机名都可以省略。

$ git pull
上面命令表示，当前分支自动与唯一一个追踪分支进行合并。
如果合并需要采用rebase模式，可以使用--rebase选项。

$ git pull --rebase &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;
如果远程主机删除了某个分支，默认情况下，git pull 不会在拉取远程分支的时候，删除对应的本地分支。这是为了防止，由于其他人操作了远程主机，导致git pull不知不觉删除了本地分支。
但是，你可以改变这个行为，加上参数 -p 就会在本地删除远程已经删除的分支。

$ git pull -p
# 等同于下面的命令
$ git fetch --prune origin 
$ git fetch -p
</code></pre><h2 id="五、git-push"><a href="#五、git-push" class="headerlink" title="五、git push"></a>五、git push</h2><p>git push命令用于将本地分支的更新，推送到远程主机。它的格式与git pull命令相仿。</p>
<pre><code>$ git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;
注意，分支推送顺序的写法是&lt;来源地&gt;:&lt;目的地&gt;，所以git pull是&lt;远程分支&gt;:&lt;本地分支&gt;，而git push是&lt;本地分支&gt;:&lt;远程分支&gt;。
如果省略远程分支名，则表示将本地分支推送与之存在&quot;追踪关系&quot;的远程分支（通常两者同名），如果该远程分支不存在，则会被新建。

$ git push origin master
上面命令表示，将本地的master分支推送到origin主机的master分支。如果后者不存在，则会被新建。
如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。

$ git push origin :master
# 等同于
$ git push origin --delete master
上面命令表示删除origin主机的master分支。
如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。

$ git push origin
上面命令表示，将当前分支推送到origin主机的对应分支。
如果当前分支只有一个追踪分支，那么主机名都可以省略。

$ git push
如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用git push。

$ git push -u origin master
上面命令将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了。
不带任何参数的git push，默认只推送当前分支，这叫做simple方式。此外，还有一种matching方式，会推送所有有对应的远程分支的本地分支。Git 2.0版本之前，默认采用matching方法，现在改为默认采用simple方式。如果要修改这个设置，可以采用git config命令。

$ git config --global push.default matching
# 或者
$ git config --global push.default simple
还有一种情况，就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用--all选项。

$ git push --all origin
上面命令表示，将所有本地分支都推送到origin主机。
如果远程主机的版本比本地版本更新，推送时Git会报错，要求先在本地做git pull合并差异，然后再推送到远程主机。这时，如果你一定要推送，可以使用--force选项。

$ git push --force origin 
上面命令使用--force选项，结果导致远程主机上更新的版本被覆盖。除非你很确定要这样做，否则应该尽量避免使用--force选项。
最后，git push不会推送标签（tag），除非使用--tags选项。

$ git push origin --tags
</code></pre><p>（完）<br>文档信息<br>版权声明：转载-阮一峰博客<br>发表日期： 2014年6月12日</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Git远程操作详解&quot;&gt;&lt;a href=&quot;#Git远程操作详解&quot; class=&quot;headerlink&quot; title=&quot;Git远程操作详解&quot;&gt;&lt;/a&gt;Git远程操作详解&lt;/h1&gt;&lt;p&gt;Git是目前最流行的版本管理系统，学会Git几乎成了开发者的必备技能。&lt;br&gt;
    
    </summary>
    
      <category term="Git 命令" scheme="https://github.com/x-future/x-future.github.io/categories/Git-%E5%91%BD%E4%BB%A4/"/>
    
      <category term="Git远程操作详解" scheme="https://github.com/x-future/x-future.github.io/categories/Git-%E5%91%BD%E4%BB%A4/Git%E8%BF%9C%E7%A8%8B%E6%93%8D%E4%BD%9C%E8%AF%A6%E8%A7%A3/"/>
    
    
      <category term="Git" scheme="https://github.com/x-future/x-future.github.io/tags/Git/"/>
    
      <category term="Git远程操作详解" scheme="https://github.com/x-future/x-future.github.io/tags/Git%E8%BF%9C%E7%A8%8B%E6%93%8D%E4%BD%9C%E8%AF%A6%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>Python解释器</title>
    <link href="https://github.com/x-future/x-future.github.io/2016/12/04/Python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>https://github.com/x-future/x-future.github.io/2016/12/04/Python基础语法/</id>
    <published>2016-12-03T18:39:20.000Z</published>
    <updated>2016-12-04T10:39:49.493Z</updated>
    
    <content type="html"><![CDATA[<p>当我们编写Python代码时，我们得到的是一个包含Python代码的以.py为扩展名的文本文件。要运行代码，就需要Python解释器去执行.py文件。<br><a id="more"></a><br>由于整个Python语言从规范到解释器都是开源的，所以理论上，只要水平够高，任何人都可以编写Python解释器来执行Python代码（当然难度很大）。事实上，确实存在多种Python解释器。</p>
<p>CPython</p>
<p>当我们从Python官方网站下载并安装好Python 2.7后，我们就直接获得了一个官方版本的解释器：CPython。这个解释器是用C语言开发的，所以叫CPython。在命令行下运行python就是启动CPython解释器。</p>
<p>CPython是使用最广的Python解释器。教程的所有代码也都在CPython下执行。</p>
<p>IPython</p>
<p>IPython是基于CPython之上的一个交互式解释器，也就是说，IPython只是在交互方式上有所增强，但是执行Python代码的功能和CPython是完全一样的。好比很多国产浏览器虽然外观不同，但内核其实都是调用了IE。</p>
<p>CPython用&gt;&gt;&gt;作为提示符，而IPython用In [序号]:作为提示符。</p>
<p>PyPy</p>
<p>PyPy是另一个Python解释器，它的目标是执行速度。PyPy采用JIT技术，对Python代码进行动态编译（注意不是解释），所以可以显著提高Python代码的执行速度。</p>
<p>绝大部分Python代码都可以在PyPy下运行，但是PyPy和CPython有一些是不同的，这就导致相同的Python代码在两种解释器下执行可能会有不同的结果。如果你的代码要放到PyPy下执行，就需要了解PyPy和CPython的不同点。</p>
<p>Jython</p>
<p>Jython是运行在Java平台上的Python解释器，可以直接把Python代码编译成Java字节码执行。</p>
<p>IronPython</p>
<p>IronPython和Jython类似，只不过IronPython是运行在微软.Net平台上的Python解释器，可以直接把Python代码编译成.Net的字节码。</p>
<p>小结</p>
<p>Python的解释器很多，但使用最广泛的还是CPython。如果要和Java或.Net平台交互，最好的办法不是用Jython或IronPython，而是通过网络调用来交互，确保各程序之间的独立性。</p>
<p>本教程的所有代码只确保在CPython 2.7版本下运行。请务必在本地安装CPython（也就是从Python官方网站下载的安装程序）。</p>
<p>此外，教程还内嵌一个IPython的Web版本，用来在浏览器内练习执行一些Python代码。要注意两者功能一样，输入的代码一样，但是提示符有所不同。另外，不是所有代码都能在Web版本的IPython中执行，出于安全原因，很多操作（比如文件操作）是受限的，所以有些代码必须在本地环境执行代码。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当我们编写Python代码时，我们得到的是一个包含Python代码的以.py为扩展名的文本文件。要运行代码，就需要Python解释器去执行.py文件。&lt;br&gt;
    
    </summary>
    
      <category term="python基础" scheme="https://github.com/x-future/x-future.github.io/categories/python%E5%9F%BA%E7%A1%80/"/>
    
      <category term="Python解释器" scheme="https://github.com/x-future/x-future.github.io/categories/python%E5%9F%BA%E7%A1%80/Python%E8%A7%A3%E9%87%8A%E5%99%A8/"/>
    
    
      <category term="Python" scheme="https://github.com/x-future/x-future.github.io/tags/Python/"/>
    
      <category term="Python解释器" scheme="https://github.com/x-future/x-future.github.io/tags/Python%E8%A7%A3%E9%87%8A%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Hexo</title>
    <link href="https://github.com/x-future/x-future.github.io/2016/11/28/hello-world/"/>
    <id>https://github.com/x-future/x-future.github.io/2016/11/28/hello-world/</id>
    <published>2016-11-27T16:22:45.106Z</published>
    <updated>2016-12-04T14:08:09.873Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.<br><a id="more"></a></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
